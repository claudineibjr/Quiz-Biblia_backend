scalar Date

#fragment fullUser on User{
#    uid
#    email
#    name
#    answered
#    score
#    lastPlay
#    firstAccess
#    bonus{
#      moreTime
#      lessAlternatives
#      showBiblicalReference
#      lastBonusReceived
#    }
#    preferences{
#      sounds
#      vibration
#    }
#}

# Model User
type User{
    uid: String
    email: String
    name: String
    answered: [Int]
    score: Int
    lastPlay: Date
    firstAccess: Date
    bonus: UserBonus
    preferences: UserPreferences
}

type UserBonus {
    moreTime: Int
    lessAlternatives: Int
    showBiblicalReference: Int
    lastBonusReceived: Date
}

type UserPreferences {
    sounds: Boolean
    vibration: Boolean
}

input UserInput_Create {
    email: String!
    name: String!
    password: String!
}

#type UserInput_Update {
#
#}

# Queries
type Query{
    getUserByEmail(email: String!): User
    getUserById(id: String!): User
    getAllUsers: [User]
}

# Mutations
type Mutation {
    createUser(user: UserInput_Create!): User
}